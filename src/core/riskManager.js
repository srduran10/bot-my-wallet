// üß† Clasifica perfil seg√∫n capital disponible
export function getRiskProfile(capital) {
  if (capital <= 30) return 'rescate';
  if (capital <= 100) return 'cauto';
  if (capital <= 500) return 'activo';
  if (capital <= 1000) return 'expansivo';
  return 'agresivo';
}

// üìä Eval√∫a si se debe operar seg√∫n perfil y fuerza de se√±al
export function shouldExecuteTrade(profile, signalStrength) {
  const thresholds = {
    rescate: 85,
    cauto: 75,
    activo: 65,
    expansivo: 55,
    agresivo: 45
  };

  return signalStrength >= thresholds[profile];
}

// üóíÔ∏è Devuelve notas t√°cticas seg√∫n perfil
export function getExecutionNotes(profile) {
  const notes = {
    rescate: 'üõë Modo Rescate activado ‚Äî operando solo con se√±ales >85%',
    cauto: 'üß§ Perfil Cauto ‚Äî prioriza se√±ales >75%',
    activo: 'üèÉ‚Äç‚ôÇÔ∏è Perfil Activo ‚Äî busca movimiento razonable >65%',
    expansivo: 'üöÄ Perfil Expansivo ‚Äî ampl√≠a el rango >55%',
    agresivo: 'üî• Perfil Agresivo ‚Äî operando sin miedo >45%'
  };

  return notes[profile] || '‚ö†Ô∏è Perfil desconocido';
}

// üõ°Ô∏è Calcula niveles de SL y TP seg√∫n estrategia
export function calculateRiskLevels(entryPrice, side, slPercent, tpPercent) {
  const isBuy = side === 'BUY';
  const stopLoss = isBuy
    ? entryPrice * (1 - slPercent / 100)
    : entryPrice * (1 + slPercent / 100);

  const takeProfit = isBuy
    ? entryPrice * (1 + tpPercent / 100)
    : entryPrice * (1 - tpPercent / 100);

  return { stopLoss, takeProfit };
}